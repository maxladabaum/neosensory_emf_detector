#include <neosensory_bluefruit.h>
#define sample_1 162
#define sample_2 164
#define sample_3 166

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//declarations:

NeosensoryBluefruit NeoBluefruit;

int inPin = A3;
float test_value [4] = {0, 0, 0, 0};

float val_0;
float val_1;
float val_2;
float val_3;

int min_low = 26;
int max_low = 50;
int min_mid = 26;
int max_mid = 50;
int min_high = 26;
int max_high = 50;

int incriment_1 = sample_1;
int incriment_2 = sample_2;
int incriment_3 = sample_3;
int maximum_1 = 0;
int maximum_2 = 0;
int maximum_3 = 0;

int array1[sample_1];
int array2[sample_2];
int array3[sample_3];

unsigned long averaging_1;
unsigned long averaging_2;
unsigned long averaging_3;

unsigned long timing_1_start;
unsigned long timing_1_end;
unsigned long timing_2_start;
unsigned long timing_2_end;
unsigned long timing_3_start;
unsigned long timing_3_end;

void setup() {
  Serial.begin(9600);
  NeoBluefruit.begin();
  NeoBluefruit.setConnectedCallback(onConnected);
  NeoBluefruit.setDisconnectedCallback(onDisconnected);
  NeoBluefruit.setReadNotifyCallback(onReadNotify);
  NeoBluefruit.startScan();
  while (!NeoBluefruit.isConnected() || !NeoBluefruit.isAuthorized()) {}
  NeoBluefruit.deviceInfo();
  NeoBluefruit.deviceBattery();
  timing_1_end = 0;
  timing_2_end = 0;
  timing_3_end = 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//loop:

void loop() {

float test[NeoBluefruit.num_motors()];

  if (NeoBluefruit.isConnected() && NeoBluefruit.isAuthorized()) {

        timing_1_start = millis();
        while (timing_1_start - timing_1_end < incriment_1) {
          timing_1_start = millis();
          delayMicroseconds(1);
        }       
        for(int i = 0; i < sample_1; i++){
          array1[i] = analogRead(inPin);
          averaging_1 += array1[i];
        }
        timing_1_end = millis();
        timing_2_start = millis();
        while (timing_2_start - timing_2_end < incriment_2) {
          timing_2_start = millis();
          delayMicroseconds(1);
        } 
        for(int i = 0; i < sample_2; i++){
          array2[i] = analogRead(inPin);
          averaging_2 += array2[i];
        }
        timing_2_end = millis();
        timing_3_start = millis();
        while (timing_3_start - timing_3_end < incriment_3) {
          timing_3_start = millis();
          delayMicroseconds(1);
        } 
        for(int j = 0; j < sample_3; j++){
          array3[j] = analogRead(inPin);
          averaging_3 += array3[j];
        }
        timing_3_end = millis();

   
        for(int k=0;k <= sample_2; k++) {
          if(array2[k] > array2[maximum_2]) {
            maximum_2 = k;
          }
        }
        for(int h=0;h <= sample_1; h++) {
          if(array1[h] > array1[maximum_1]) {
            maximum_1 = h;
          }
        }
        for(int z=0;z <= sample_3; z++) {
          if(array3[z] > array3[maximum_3]) {
            maximum_3 = z;
          }
        }

        val_0 = find_largest(array1[maximum_1], array2[maximum_2], 0);
        val_0 = constrain(val_0, 50, 100);
        val_0 = lerp(50, 100, val_0);

        val_1 = val_generator(averaging_1, sample_1, min_low, max_low);
        val_2 = val_generator(averaging_2, sample_2, min_mid, max_mid);
        val_3 = val_generator(averaging_3, sample_3, min_high, max_high);   
         
        test[0] = val_0;
        test[1] = val_1;
        test[2] = val_2;
        test[3] = val_3;

        NeoBluefruit.vibrateMotors(test);
         
        averaging_1 = 0;
        averaging_2 = 0;
        averaging_3 = 0;

  }
else {
      NeoBluefruit.vibrateMotors(test_value);
    } 

  }
  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//functions:


float find_largest(float _max1, float _max2, float _max3){
  float largest = 0;
  if(_max1 > _max2 && _max1 > _max3){
  largest = _max1;
  }
  if(_max2 > _max1 && _max2 > _max3){
  largest = _max2;
  }
  if(_max3 > _max1 && _max3 > _max2){
  largest = _max3;
  }
return largest;
}


float val_generator(float averaging, float sample, float _min, float _max){
float val = averaging / sample;                  
val = constrain(val, _min, _max);               
val = lerp(_min, _max, val);
return val;
}


float lerp(float _min, float _max, float thing_mapped){
float f = (thing_mapped - _min) / (_max - _min);
if (f<0){
  f=0;
}
return f;
}


void onConnected(bool success) {
  if (!success) {
    Serial.println("Attempted connection but failed.");
    return;
  }
  Serial.println("Connected!");

  NeoBluefruit.authorizeDeveloper();
  NeoBluefruit.acceptTermsAndConditions();
  NeoBluefruit.stopAlgorithm();
}


void onDisconnected(uint16_t conn_handle, uint8_t reason) {
  Serial.println("\nDisconnected");
}


void onReadNotify(BLEClientCharacteristic* chr, uint8_t* data, uint16_t len) {
  for (int i = 0; i < len; i++) {
    Serial.write(data[i]);
  }
}
